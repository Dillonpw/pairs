generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// auth tables 
model User {
  id            String  @id @default(cuid())  // Use Clerk's `id` instead of `cuid()` if feasible
  clerkId       String  @unique               // Store Clerk's unique user ID
  name          String?
  email         String  @unique
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  Group          Group[]
  GroupMember    GroupMember[]
  Task           Task[]
  TaskAssignment TaskAssignment[]
}


//application tables

model Group {
  id          String   @id @default(cuid())
  name        String
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])
  members     GroupMember[]
  tasks       Task[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([name, createdById])
}


model GroupMember {
  id      String           @id @default(cuid())
  groupId String
  userId  String
  role    GroupRole
  points  Int              @default(0)
  group   Group            @relation(fields: [groupId], references: [id])
  user    User             @relation(fields: [userId], references: [id])
  tasks   TaskAssignment[]

  @@unique([groupId, userId])
}

enum GroupRole {
  ADMIN
  MEMBER
}

model Task {
  id          String           @id @default(cuid())
  groupId     String
  name        String
  description String
  recurrence  String?
  value       Int
  status      TaskStatus       @default(INCOMPLETE)
  createdById String
  createdBy   User             @relation(fields: [createdById], references: [id])
  assignments TaskAssignment[]
  group       Group            @relation(fields: [groupId], references: [id])
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model TaskAssignment {
  id            String       @id @default(cuid())
  taskId        String
  userId        String
  status        TaskStatus   @default(INCOMPLETE)
  completedAt   DateTime?
  task          Task         @relation(fields: [taskId], references: [id])
  user          User         @relation(fields: [userId], references: [id])
  GroupMember   GroupMember? @relation(fields: [groupMemberId], references: [id])
  groupMemberId String?

  @@unique([taskId, userId])
}

enum TaskStatus {
  INCOMPLETE
  IN_PROGRESS
  FINISHED
}
