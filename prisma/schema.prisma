generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// auth tables 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  Group          Group[]
  GroupMember    GroupMember[]
  Task           Task[]
  TaskAssignment TaskAssignment[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

//application tables

model Group {
  id          String   @id @default(cuid())
  name        String
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])
  members     GroupMember[]
  tasks       Task[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([name, createdById]) // Composite unique constraint
}


model GroupMember {
  id      String           @id @default(cuid())
  groupId String
  userId  String
  role    GroupRole
  points  Int              @default(0)
  group   Group            @relation(fields: [groupId], references: [id])
  user    User             @relation(fields: [userId], references: [id])
  tasks   TaskAssignment[]

  @@unique([groupId, userId])
}

enum GroupRole {
  ADMIN
  MEMBER
}

model Task {
  id          String           @id @default(cuid())
  groupId     String
  name        String
  description String
  recurrence  String?
  value       Int
  status      TaskStatus       @default(INCOMPLETE)
  createdById String
  createdBy   User             @relation(fields: [createdById], references: [id])
  assignments TaskAssignment[]
  group       Group            @relation(fields: [groupId], references: [id])
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model TaskAssignment {
  id            String       @id @default(cuid())
  taskId        String
  userId        String
  status        TaskStatus   @default(INCOMPLETE)
  completedAt   DateTime?
  task          Task         @relation(fields: [taskId], references: [id])
  user          User         @relation(fields: [userId], references: [id])
  GroupMember   GroupMember? @relation(fields: [groupMemberId], references: [id])
  groupMemberId String?

  @@unique([taskId, userId])
}

enum TaskStatus {
  INCOMPLETE
  IN_PROGRESS
  FINISHED
}
